// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for CrawlRequestStatus.
const (
	CrawlRequestStatusComplete CrawlRequestStatus = "complete"

	CrawlRequestStatusFailed CrawlRequestStatus = "failed"

	CrawlRequestStatusInProgress CrawlRequestStatus = "in_progress"

	CrawlRequestStatusQueued CrawlRequestStatus = "queued"
)

// Crawl defines model for Crawl.
type Crawl struct {
	CreatedAt *string `json:"created_at,omitempty"`

	// The HTML of the website from the crawl
	Html  *string `json:"html,omitempty"`
	RefId *string `json:"ref_id,omitempty"`

	// The raw text extracted from the HTML
	Text      *string `json:"text,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Website   *string `json:"website,omitempty"`
}

// CrawlRequest defines model for CrawlRequest.
type CrawlRequest struct {
	Available *bool `json:"available,omitempty"`

	// The details created from this crawl request as a crawl
	CrawlId   *string             `json:"crawl_id,omitempty"`
	CreatedAt *string             `json:"created_at,omitempty"`
	RefId     *string             `json:"ref_id,omitempty"`
	Status    *CrawlRequestStatus `json:"status,omitempty"`
	UpdatedAt *string             `json:"updated_at,omitempty"`
	Website   *string             `json:"website,omitempty"`
}

// CrawlRequestStatus defines model for CrawlRequest.Status.
type CrawlRequestStatus string

// CrawlRequestResponse defines model for CrawlRequestResponse.
type CrawlRequestResponse struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Id        *string `json:"id,omitempty"`
	RefId     *string `json:"ref_id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Website   *string `json:"website,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// A human-readable explanation specific to this occurrence of the problem
	Detail string `json:"detail"`

	// The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int32 `json:"status"`

	// A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".
	Type string `json:"type"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Status string `json:"status"`
}

// CreateCrawlRequestJSONBody defines parameters for CreateCrawlRequest.
type CreateCrawlRequestJSONBody CrawlRequest

// GetApiV1CrawlsParams defines parameters for GetApiV1Crawls.
type GetApiV1CrawlsParams struct {
	// use to filter crawls by ref_id
	RefId *string `json:"ref_id,omitempty"`

	// The number of crawls per a page. Max allowed value 1000
	Limit *int `json:"limit,omitempty"`
}

// CreateCrawlRequestJSONRequestBody defines body for CreateCrawlRequest for application/json ContentType.
type CreateCrawlRequestJSONRequestBody CreateCrawlRequestJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Paginated list of crawl requests
	// (GET /api/v1/crawl_requests)
	IndexCrawlRequests(ctx echo.Context) error
	// Crawls the website specified in the payload
	// (POST /api/v1/crawl_requests)
	CreateCrawlRequest(ctx echo.Context) error
	// Returns a list of crawls
	// (GET /api/v1/crawl_requests/{uuid})
	GetApiV1CrawlRequestsUuid(ctx echo.Context, uuid string) error
	// Returns paginated list of crawls
	// (GET /api/v1/crawls)
	GetApiV1Crawls(ctx echo.Context, params GetApiV1CrawlsParams) error
	// Returns a list of crawls
	// (GET /api/v1/crawls/{uuid})
	GetApiV1CrawlsUuid(ctx echo.Context, uuid string) error
	// Returns application status
	// (GET /api/v1/health)
	GetApiV1Health(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// IndexCrawlRequests converts echo context to params.
func (w *ServerInterfaceWrapper) IndexCrawlRequests(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IndexCrawlRequests(ctx)
	return err
}

// CreateCrawlRequest converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCrawlRequest(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCrawlRequest(ctx)
	return err
}

// GetApiV1CrawlRequestsUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1CrawlRequestsUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV1CrawlRequestsUuid(ctx, uuid)
	return err
}

// GetApiV1Crawls converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Crawls(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1CrawlsParams
	// ------------- Optional query parameter "ref_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "ref_id", ctx.QueryParams(), &params.RefId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref_id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV1Crawls(ctx, params)
	return err
}

// GetApiV1CrawlsUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1CrawlsUuid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "uuid" -------------
	var uuid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "uuid", runtime.ParamLocationPath, ctx.Param("uuid"), &uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV1CrawlsUuid(ctx, uuid)
	return err
}

// GetApiV1Health converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Health(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApiV1Health(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/crawl_requests", wrapper.IndexCrawlRequests)
	router.POST(baseURL+"/api/v1/crawl_requests", wrapper.CreateCrawlRequest)
	router.GET(baseURL+"/api/v1/crawl_requests/:uuid", wrapper.GetApiV1CrawlRequestsUuid)
	router.GET(baseURL+"/api/v1/crawls", wrapper.GetApiV1Crawls)
	router.GET(baseURL+"/api/v1/crawls/:uuid", wrapper.GetApiV1CrawlsUuid)
	router.GET(baseURL+"/api/v1/health", wrapper.GetApiV1Health)

}
